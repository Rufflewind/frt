class Makefile(object):

    header = "# autogenerated\n.POSIX:\n.SUFFIXES:\n"

    def __init__(self, macros=None, rules=None, phonys=None, default=None):
        '''Representation of a makefile.
        @param macros    {Str: Str}     macro definitions
        @param rules     {Str: Rule}    (non-phony) target rules
        @param phonys    {Str: Rule}    phony rules
        @param default   Str | None     default target
        '''
        self.macros  = macros or {}
        self.rules   = rules  or {}
        self.phonys  = phonys or {}
        self.default = None

    def to_str(self):
        '''Convert the makefile to a string.'''

        # note: don't mutate any of these
        macros  = self.macros
        rules   = self.rules
        phonys  = self.phonys
        default = self.default

        s = [self.header, None]

        for name, value in sorted(macros.items()):
            s.extend((name, "=", value.replace("\n", "\\\n    "), "\n"))
        _append_sep(s)

        if default:
            phonys.get(default, rules[default]).build_str(s, default)
            _append_sep(s)

        for target, rule in sorted(phonys.items()):
            if target != default:
                rule.build_str(s, target)
                _append_sep(s)

        for target, rule in sorted(rules.items()):
            if target != default:
                rule.build_str(s, target)
                _append_sep(s)

        if phonys:
            Rule(sorted(phonys.keys())).build_str(s, ".PHONY")

        _strip_sep(s)
        return "".join("\n" if x is None else x for x in s)

    def to_file(self, filename):
        '''Write the makefile to a file, overwriting if it exists.'''
        with open(filename, "w") as f:
            f.write(self.to_str())

class Rule(object):

    def __init__(self, prereqs=None, commands=None):
        '''Information associated with a makefile rule.
        @param prereqs   Iterable Str   prerequisite targets
        @param commands  Iterable Str   shell commands
        '''
        self.prereqs  = set(prereqs)   if prereqs  else set()
        self.commands = list(commands) if commands else []

    def build_str(self, s, target):
        '''Convert the rule to a string.'''
        s.extend((target, ":"))
        for prereq in sorted(self.prereqs):
            s.extend((" ", prereq))
        s.append("\n")
        for command in self.commands:
            s.extend(("\t", command.replace("\n", " \\\n\t    "), "\n"))

def escape(s):
    return s.replace("$", "$$")

def _strip_sep(s):
    while s:
        if s[-1] is None:
            del s[-1]
        break

def _append_sep(s):
    _strip_sep(s)
    s.append(None)
